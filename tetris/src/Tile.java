/** * Individual tile that may be placed on the board * */public class Tile {    private boolean[][] tile;    private static final int TILESIZE = 5;    public Tile(String tileString) {        this.tile = new boolean[TILESIZE][TILESIZE];        int place = 0;        for (int i = 0; i < TILESIZE; i++) {            for (int j = 0; j < TILESIZE; j++) {                this.tile[i][j] = tileString.charAt(place) == '1';                place++;            }        }    }    public boolean[][] getTile() {        return tile;    }    public boolean[][] getTile(int rotations) throws InvalidRotationException {        if (rotations % 90 != 0) {            throw new InvalidRotationException("Invalid Rotation");        }        // Copy the tile        boolean[][] rotated = new boolean[TILESIZE][TILESIZE];        for (int i = 0; i < TILESIZE; i++) {            for (int j = 0; j < TILESIZE; j++) {                rotated[i][j] = this.tile[i][j];            }        }        while (rotations != 0) {            // Rotate            // Consider all squares one by one             for (int x = 0; x < TILESIZE / 2; x++) {                // Consider elements in group of 4 in                  // current square                for (int i = 0; i < 3; i++) {                    for (int y = x; y < TILESIZE-x-1; y++) {                        boolean temp = rotated[x][y];                        rotated[x][y] = rotated[y][TILESIZE-1-x];                        rotated[y][TILESIZE-1-x] = rotated[TILESIZE-1-x][TILESIZE-1-y];                        rotated[TILESIZE-1-x][TILESIZE-1-y] = rotated[TILESIZE-1-y][x];                        rotated[TILESIZE-1-y][x] = temp;                    }                }            }            rotations -= 90;        }        return rotated;    }    public void printTile() {        for (int i = 0; i < TILESIZE; i++) {            for (int j = 0; j < TILESIZE; j++) {                if (this.tile[i][j]) {                    System.out.print("* ");                } else {                    System.out.print(". ");                }            }            System.out.println();        }    }    public void printTile(int rotations) {        boolean[][] tile;        try {            tile = getTile(rotations);        } catch (Exception e) {            System.out.println("Bad rotations");            return;        }        for (int i = 0; i < TILESIZE; i++) {            for (int j = 0; j < TILESIZE; j++) {                if (tile[i][j]) {                    System.out.print("* ");                } else {                    System.out.print(". ");                }            }            System.out.println();        }    }}